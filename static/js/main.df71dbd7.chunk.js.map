{"version":3,"sources":["assets/imgs/logo.png","assets/imgs/rick-n-morty.png","assets/imgs/toxic-rick-n-morty.png","components/Header/index.tsx","components/Layout/index.tsx","components/BackToTop/index.tsx","components/Badge/index.tsx","assets/imgs/placeholder-img.png","components/CardImage/index.tsx","components/LoaderCards/index.tsx","utils/fetcher.ts","features/Finder/graphql/queries/getCharactersQuery.ts","features/Finder/services/getCharacters.ts","features/Finder/hooks/useCharacters.ts","assets/imgs/placeholder-img-dark.png","features/Finder/components/AlertMessage.tsx","features/Finder/components/CharactersGrid.tsx","state/finder/types.ts","state/finder/reducer.ts","state/finder/context.tsx","state/finder/useFinder.ts","features/Finder/components/CharacterList.tsx","features/Finder/components/SearchForm.tsx","features/Finder/index.tsx","App.tsx","reportWebVitals.ts","state/chakra/theme/index.ts","state/chakra/theme/styles.ts","state/chakra/theme/config.ts","state/chakra/ChakraUiProvider.tsx","state/query/queryClient.ts","state/query/QueryProvider.tsx","state/index.tsx","index.tsx"],"names":["Header","useColorMode","toggleColorMode","colorMode","text","useColorModeValue","bgHeader","borderColor","SwitchIcon","Moon","Sun","bg","borderBottom","as","data-testid","mx","maxW","py","px","justifyContent","alignItems","aria-label","variant","_hover","_active","_focus","outline","icon","src","Logo","alt","onClick","window","location","reload","color","size","ml","RickNMorty","display","ToxicRickNMorty","Layout","children","BackToTop","useState","showScroll","setShowScroll","buttonRef","useRef","useEffect","toogleScroll","pageYOffset","addEventListener","removeEventListener","colorScheme","position","boxShadow","right","bottom","scrollTo","top","behavior","current","blur","opacity","ref","Badge","rounded","fontSize","textTransform","mr","whiteSpace","CardImage","title","description","image","badge","shadow","descriptionColor","left","transform","zIndex","ratio","w","objectFit","overflow","fallbackSrc","PlaceholderImg","mt","textAlign","fontWeight","LoaderCards","Array","from","keys","map","pos","height","fetcher","GraphQLClient","process","getCharactersQuery","gql","vars","a","request","characters","getCharacters","useCharacters","name","status","useInfiniteQuery","pageParam","queryKey","page","getNextPageParam","lastPage","info","next","AlertMessage","actions","textColor","my","flexDirection","mb","PlaceholderDarkImg","CharactersGrid","gridRef","templateColumns","columnGap","rowGap","SET_SEARCH","SET_SEARCH_LOADING","initState","loading","FinderReducer","state","action","type","payload","FinderContext","createContext","dispatch","FinderProvider","useReducer","Provider","value","useFinder","context","useContext","useMemo","setSearch","setSearchLoading","enable","finder","CharacterList","data","fetchNextPage","hasNextPage","isFetchingNextPage","isLoading","isError","infiniteRef","useInfiniteScroll","onLoadMore","badges","unknown","statusText","Alive","Dead","pages","group","i","Fragment","results","id","species","SearchForm","setName","setStatus","bgInputs","onSubmit","e","preventDefault","placeholder","focusBorderColor","onChange","target","minW","Finder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","overrides","styles","global","props","body","mode","config","initialColorMode","useSystemColorMode","fonts","fontWeights","light","normal","medium","bold","black","extendTheme","theme","ChakraUiProvider","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","retry","QueryProvider","QueryClientProvider","client","AppProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df71dbd7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.3c6f5bc4.png\";","export default __webpack_public_path__ + \"static/media/rick-n-morty.e66eb8ab.png\";","export default __webpack_public_path__ + \"static/media/toxic-rick-n-morty.ac325463.png\";","import {\r\n  Flex,\r\n  IconButton,\r\n  useColorMode,\r\n  useColorModeValue,\r\n  Image,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { Sun, Moon } from \"react-feather\";\r\n\r\nimport Logo from \"assets/imgs/logo.png\";\r\nimport RickNMorty from \"assets/imgs/rick-n-morty.png\";\r\nimport ToxicRickNMorty from \"assets/imgs/toxic-rick-n-morty.png\";\r\n\r\nconst Header: React.FC = () => {\r\n  const { toggleColorMode, colorMode } = useColorMode();\r\n  const text = useColorModeValue(\"dark\", \"light\");\r\n\r\n  const bgHeader = useColorModeValue(\"white\", \"gray.700\");\r\n  const borderColor = useColorModeValue(\"gray.300\", \"gray.900\");\r\n\r\n  const SwitchIcon = useColorModeValue(Moon, Sun);\r\n\r\n  const reloadPage = () => window.location.reload();\r\n\r\n  return (\r\n    <Box\r\n      bg={bgHeader}\r\n      borderBottom=\"1px\"\r\n      borderColor={borderColor}\r\n      as=\"header\"\r\n      data-testid=\"Header\"\r\n    >\r\n      <Box mx=\"auto\" maxW=\"6xl\" py={4} px={[4, 8]}>\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <IconButton\r\n            data-testid=\"Header__logo\"\r\n            aria-label=\"Rick and Morty logo button\"\r\n            variant=\"ghost\"\r\n            _hover={{\r\n              bg: \"transparent\",\r\n            }}\r\n            _active={{\r\n              bg: \"transparent\",\r\n            }}\r\n            _focus={{\r\n              outline: \"none\",\r\n            }}\r\n            icon={\r\n              <Image\r\n                src={Logo}\r\n                alt=\"Rick and Morty logo\"\r\n                maxW={[\"150px\", \"200px\"]}\r\n              />\r\n            }\r\n            onClick={reloadPage}\r\n          />\r\n\r\n          <IconButton\r\n            data-testid=\"Header__switchMode\"\r\n            variant=\"ghost\"\r\n            color=\"current\"\r\n            size=\"xlg\"\r\n            onClick={toggleColorMode}\r\n            aria-label={`Switch to ${text} mode`}\r\n            _focus={{\r\n              outline: \"none\",\r\n            }}\r\n            icon={\r\n              <Flex alignItems=\"center\" px={4}>\r\n                <SwitchIcon />\r\n\r\n                <Box maxW={[\"80px\", \"100px\"]} ml={4}>\r\n                  <Image\r\n                    src={RickNMorty}\r\n                    alt=\"R and M\"\r\n                    display={colorMode === \"light\" ? \"block\" : \"none\"}\r\n                  />\r\n\r\n                  <Image\r\n                    src={ToxicRickNMorty}\r\n                    alt=\"Toxic R and M\"\r\n                    display={colorMode === \"dark\" ? \"block\" : \"none\"}\r\n                  />\r\n                </Box>\r\n              </Flex>\r\n            }\r\n          />\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { Box } from \"@chakra-ui/react\";\r\nimport Header from \"components/Header\";\r\n\r\nconst Layout: React.FC = ({ children }) => {\r\n  return (\r\n    <Box>\r\n      <Header />\r\n\r\n      <Box mx=\"auto\" maxW=\"6xl\" py={8} px={[4, 8]}>\r\n        {children}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import { IconButton } from \"@chakra-ui/react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { ArrowUp } from \"react-feather\";\r\n\r\nconst BackToTop: React.FC = () => {\r\n  const [showScroll, setShowScroll] = useState(false);\r\n  const buttonRef = useRef<HTMLButtonElement>(null);\r\n\r\n  const scrollTop = () => {\r\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n\r\n    buttonRef.current?.blur();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const toogleScroll = () => {\r\n      const threshold = 400;\r\n\r\n      setShowScroll(window.pageYOffset > threshold);\r\n    };\r\n\r\n    window.addEventListener(\"scroll\", toogleScroll);\r\n\r\n    return () => window.removeEventListener(\"scroll\", toogleScroll);\r\n  }, [setShowScroll]);\r\n\r\n  return (\r\n    <IconButton\r\n      colorScheme=\"teal\"\r\n      aria-label=\"Volver al inicio\"\r\n      icon={<ArrowUp />}\r\n      position=\"fixed\"\r\n      boxShadow=\"lg\"\r\n      right={[4, 4, 8]}\r\n      bottom={[4, 4, 8]}\r\n      size=\"lg\"\r\n      onClick={scrollTop}\r\n      opacity={+showScroll}\r\n      ref={buttonRef}\r\n    />\r\n  );\r\n};\r\n\r\nexport default BackToTop;\r\n","import { Flex, Box } from \"@chakra-ui/react\";\r\n\r\ninterface IBadgeProps {\r\n  bg: string;\r\n  icon: React.ReactNode;\r\n}\r\n\r\nconst Badge: React.FC<IBadgeProps> = ({ children, bg, icon }) => {\r\n  return (\r\n    <Flex\r\n      data-testid=\"Badge\"\r\n      rounded=\"full\"\r\n      px={3}\r\n      py={1}\r\n      color=\"white\"\r\n      boxShadow=\"lg\"\r\n      fontSize=\"sm\"\r\n      textTransform=\"uppercase\"\r\n      bg={bg}\r\n      alignItems=\"center\"\r\n    >\r\n      <Box mr={1} whiteSpace=\"nowrap\">\r\n        {children}\r\n      </Box>{\" \"}\r\n      {icon}\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Badge;\r\n","export default __webpack_public_path__ + \"static/media/placeholder-img.8a6b9601.png\";","import {\r\n  Box,\r\n  Image,\r\n  Text,\r\n  AspectRatio,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport PlaceholderImg from \"assets/imgs/placeholder-img.png\";\r\n\r\ninterface ICardImageProps {\r\n  title: string;\r\n  description: string;\r\n  image: string;\r\n  badge: React.ReactNode;\r\n}\r\n\r\nconst CardImage: React.FC<ICardImageProps> = ({\r\n  title,\r\n  description,\r\n  image,\r\n  badge,\r\n}) => {\r\n  const shadow = useColorModeValue(\"lg\", \"dark-lg\");\r\n  const descriptionColor = useColorModeValue(\"cyan.600\", \"cyan.200\");\r\n\r\n  return (\r\n    <Box position=\"relative\" data-testid=\"CardImage\">\r\n      <Box position=\"relative\">\r\n        <Box\r\n          position=\"absolute\"\r\n          left=\"50%\"\r\n          transform=\"translate(-50%, -50%)\"\r\n          zIndex=\"docked\"\r\n        >\r\n          {badge}\r\n        </Box>\r\n\r\n        <AspectRatio ratio={4 / 4}>\r\n          <Image\r\n            w=\"full\"\r\n            objectFit=\"cover\"\r\n            src={image}\r\n            alt={title}\r\n            rounded=\"lg\"\r\n            overflow=\"hidden\"\r\n            boxShadow={shadow}\r\n            fallbackSrc={PlaceholderImg}\r\n            bg=\"gray.400\"\r\n          />\r\n        </AspectRatio>\r\n      </Box>\r\n\r\n      <Box mt={6} position=\"relative\" textAlign=\"center\">\r\n        <Text fontSize=\"lg\" fontWeight=\"medium\">\r\n          {title}\r\n        </Text>\r\n        <Text fontSize=\"sm\" color={descriptionColor}>\r\n          {description}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CardImage;\r\n","import { Skeleton, AspectRatio } from \"@chakra-ui/react\";\r\n\r\nconst LoaderCards: React.FC = () => {\r\n  return (\r\n    <>\r\n      {Array.from(Array(4).keys()).map((pos) => (\r\n        <AspectRatio key={pos} ratio={4 / 4} data-testid=\"LoaderCard\">\r\n          <Skeleton height=\"full\" />\r\n        </AspectRatio>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoaderCards;\r\n","import { GraphQLClient } from \"graphql-request\";\r\n\r\nconst endpoint = process.env.REACT_APP_GRAPHQL_ENDPOINT as string;\r\nconst fetcher = new GraphQLClient(endpoint);\r\n\r\nexport default fetcher;\r\n","import { gql } from \"graphql-request\";\r\n\r\nconst getCharactersQuery = gql`\r\n  query getCharacters($page: Int!, $name: String!, $status: String!) {\r\n    characters(page: $page, filter: { name: $name, status: $status }) {\r\n      info {\r\n        next\r\n      }\r\n      results {\r\n        id\r\n        name\r\n        status\r\n        image\r\n        species\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default getCharactersQuery;\r\n","import fetcher from \"utils/fetcher\";\r\nimport getCharactersQuery from \"../graphql/queries/getCharactersQuery\";\r\nimport { charactersDataType } from \"../graphql/types/charactersDataType\";\r\nimport { charactersVarsType } from \"../graphql/types/charactersVarsType\";\r\n\r\nasync function getCharacters(vars: charactersVarsType) {\r\n  const { characters } = await fetcher.request<\r\n    charactersDataType,\r\n    charactersVarsType\r\n  >(getCharactersQuery, vars);\r\n\r\n  return characters;\r\n}\r\n\r\nexport default getCharacters;\r\n","import { useInfiniteQuery } from \"react-query\";\r\nimport getCharacters from \"../services/getCharacters\";\r\n\r\ninterface IUseCharacters {\r\n  name: string;\r\n  status: string;\r\n}\r\n\r\nfunction useCharacters({ name, status }: IUseCharacters) {\r\n  const firstPage = 1;\r\n  const queryKey = \"characters\";\r\n\r\n  const charactersQuery = useInfiniteQuery(\r\n    [queryKey, { name, status }],\r\n    async ({ pageParam = firstPage, queryKey: [, { name, status }] }) =>\r\n      getCharacters({ page: pageParam, name, status }),\r\n    {\r\n      getNextPageParam: (lastPage) => lastPage.info.next,\r\n    }\r\n  );\r\n\r\n  return charactersQuery;\r\n}\r\n\r\nexport default useCharacters;\r\n","export default __webpack_public_path__ + \"static/media/placeholder-img-dark.51d17462.png\";","import {\r\n  Flex,\r\n  Text,\r\n  Image,\r\n  useColorMode,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport PlaceholderImg from \"assets/imgs/placeholder-img.png\";\r\nimport PlaceholderDarkImg from \"assets/imgs/placeholder-img-dark.png\";\r\n\r\ninterface IAlertMessageProps {\r\n  actions?: React.ReactNode;\r\n}\r\n\r\nconst AlertMessage: React.FC<IAlertMessageProps> = ({ children, actions }) => {\r\n  const { colorMode } = useColorMode();\r\n  const textColor = useColorModeValue(\"teal.600\", \"teal.200\");\r\n\r\n  return (\r\n    <Flex my={16} flexDirection=\"column\" alignItems=\"center\">\r\n      <Text\r\n        fontSize=\"lg\"\r\n        mb={4}\r\n        textAlign=\"center\"\r\n        fontWeight=\"bold\"\r\n        color={textColor}\r\n      >\r\n        {children}\r\n      </Text>\r\n\r\n      {actions}\r\n\r\n      <Image\r\n        src={PlaceholderDarkImg}\r\n        fallbackSrc={PlaceholderDarkImg}\r\n        alt=\"R and M light\"\r\n        display={colorMode === \"light\" ? \"block\" : \"none\"}\r\n        opacity={0.2}\r\n      />\r\n\r\n      <Image\r\n        src={PlaceholderImg}\r\n        fallbackSrc={PlaceholderImg}\r\n        alt=\"R and M dark\"\r\n        display={colorMode === \"dark\" ? \"block\" : \"none\"}\r\n      />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default AlertMessage;\r\n","import { Grid, Box } from \"@chakra-ui/react\";\r\n\r\ninterface ICharactersGridProps {\r\n  gridRef?: React.RefObject<HTMLDivElement>;\r\n}\r\n\r\nconst CharactersGrid: React.FC<ICharactersGridProps> = ({\r\n  children,\r\n  gridRef,\r\n}) => {\r\n  return (\r\n    <Box my={16} data-testid=\"CharactersGrid\">\r\n      <Grid\r\n        templateColumns={[\"repeat(1, 1fr)\", \"repeat(2, 1fr)\", \"repeat(3, 1fr)\"]}\r\n        columnGap={12}\r\n        rowGap={20}\r\n        ref={gridRef}\r\n      >\r\n        {children}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CharactersGrid;\r\n","export const SET_SEARCH = \"SET_SEARCH\";\r\nexport const SET_SEARCH_STATUS = \"SET_SEARCH_STATUS\";\r\nexport const SET_SEARCH_LOADING = \"SET_SEARCH_LOADING\";\r\n\r\ntype setSearchAction = {\r\n  type: typeof SET_SEARCH;\r\n  payload: { name: string; status: string };\r\n};\r\n\r\ntype setSearchLoadingAction = {\r\n  type: typeof SET_SEARCH_LOADING;\r\n  payload: boolean;\r\n};\r\n\r\nexport type finderActionsTypes = setSearchAction | setSearchLoadingAction;\r\n","import { SET_SEARCH, SET_SEARCH_LOADING, finderActionsTypes } from \"./types\";\r\n\r\nexport const initState = {\r\n  name: \"\",\r\n  status: \"\",\r\n  loading: false,\r\n};\r\n\r\nexport const FinderReducer = (\r\n  state: typeof initState,\r\n  action: finderActionsTypes\r\n) => {\r\n  switch (action.type) {\r\n    case SET_SEARCH:\r\n      return {\r\n        ...state,\r\n        name: action.payload.name,\r\n        status: action.payload.status,\r\n      };\r\n    case SET_SEARCH_LOADING:\r\n      return { ...state, loading: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, Dispatch, useReducer } from \"react\";\r\nimport { finderActionsTypes } from \"./types\";\r\nimport { FinderReducer, initState } from \"./reducer\";\r\n\r\ninterface IFinderContext {\r\n  state: typeof initState;\r\n  dispatch: Dispatch<finderActionsTypes>;\r\n}\r\n\r\nexport const FinderContext = createContext<IFinderContext>({\r\n  state: initState,\r\n  dispatch: () => null,\r\n});\r\n\r\nexport const FinderProvider: React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(FinderReducer, initState);\r\n\r\n  return (\r\n    <FinderContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </FinderContext.Provider>\r\n  );\r\n};\r\n","import { useContext, useMemo } from \"react\";\r\nimport { FinderContext } from \"./context\";\r\nimport { SET_SEARCH, SET_SEARCH_LOADING } from \"./types\";\r\n\r\nfunction useFinder() {\r\n  const context = useContext(FinderContext);\r\n\r\n  const { setSearch, setSearchLoading } = useMemo(() => {\r\n    const setSearch = (name: string, status: string) => {\r\n      context.dispatch({\r\n        type: SET_SEARCH,\r\n        payload: { name, status },\r\n      });\r\n    };\r\n\r\n    const setSearchLoading = (enable: boolean) => {\r\n      context.dispatch({ type: SET_SEARCH_LOADING, payload: enable });\r\n    };\r\n\r\n    return {\r\n      setSearch,\r\n      setSearchLoading,\r\n    };\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return {\r\n    setSearch,\r\n    setSearchLoading,\r\n    finder: context.state,\r\n  };\r\n}\r\n\r\nexport default useFinder;\r\n","import React, { useEffect } from \"react\";\r\nimport Badge from \"components/Badge\";\r\nimport CardImage from \"components/CardImage\";\r\nimport LoaderCards from \"components/LoaderCards\";\r\nimport useInfiniteScroll from \"react-infinite-scroll-hook\";\r\nimport useCharacters from \"../hooks/useCharacters\";\r\nimport AlertMessage from \"./AlertMessage\";\r\nimport CharactersGrid from \"./CharactersGrid\";\r\nimport { Frown, Meh, Smile } from \"react-feather\";\r\nimport useFinder from \"state/finder/useFinder\";\r\n\r\nconst CharacterList: React.FC = () => {\r\n  const {\r\n    finder: { name, status },\r\n    setSearchLoading,\r\n  } = useFinder();\r\n\r\n  const {\r\n    data,\r\n    fetchNextPage,\r\n    hasNextPage,\r\n    isFetchingNextPage,\r\n    isLoading,\r\n    isError,\r\n  } = useCharacters({ name, status });\r\n\r\n  const infiniteRef = useInfiniteScroll({\r\n    loading: isFetchingNextPage,\r\n    hasNextPage: !!hasNextPage,\r\n    onLoadMore: fetchNextPage,\r\n  });\r\n\r\n  const badges = {\r\n    unknown: {\r\n      color: \"gray.400\",\r\n      statusText: \"No identificado\",\r\n      icon: <Meh size={18} />,\r\n    },\r\n    Alive: {\r\n      color: \"green.400\",\r\n      statusText: \"Con vida\",\r\n      icon: <Smile size={18} />,\r\n    },\r\n    Dead: {\r\n      color: \"red.400\",\r\n      statusText: \"Sin vida\",\r\n      icon: <Frown size={18} />,\r\n    },\r\n  };\r\n\r\n  useEffect(() => setSearchLoading(isLoading), [isLoading, setSearchLoading]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <CharactersGrid>\r\n        <LoaderCards />\r\n      </CharactersGrid>\r\n    );\r\n  }\r\n\r\n  if (isError) {\r\n    return (\r\n      <AlertMessage>Personaje no encontrado en esta realidad</AlertMessage>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <CharactersGrid\r\n      gridRef={infiniteRef as React.MutableRefObject<HTMLDivElement>}\r\n    >\r\n      {data?.pages.map((group, i) => (\r\n        <React.Fragment key={i}>\r\n          {group.results.map(({ name, id, species, image, status }) => {\r\n            const { color, icon, statusText } = badges[status];\r\n\r\n            return (\r\n              <CardImage\r\n                key={id}\r\n                title={name}\r\n                description={species}\r\n                image={image}\r\n                badge={\r\n                  <Badge bg={color} icon={icon}>\r\n                    {statusText}\r\n                  </Badge>\r\n                }\r\n              />\r\n            );\r\n          })}\r\n        </React.Fragment>\r\n      ))}\r\n\r\n      {isFetchingNextPage && <LoaderCards />}\r\n    </CharactersGrid>\r\n  );\r\n};\r\n\r\nexport default CharacterList;\r\n","import {\r\n  Flex,\r\n  Heading,\r\n  Input,\r\n  Select,\r\n  useColorModeValue,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport useFinder from \"state/finder/useFinder\";\r\n\r\nconst SearchForm: React.FC = () => {\r\n  const { finder, setSearch } = useFinder();\r\n  const [name, setName] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  const bgInputs = useColorModeValue(\"white\", \"gray.700\");\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLElement>) => {\r\n    setSearch(name, status);\r\n\r\n    e.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      flexDirection=\"column\"\r\n      alignItems=\"center\"\r\n      py={12}\r\n      data-testid=\"SearchForm\"\r\n    >\r\n      <Heading as=\"h2\" size=\"xl\" mb={8} textAlign=\"center\">\r\n        ¿Qué personaje estas buscando?\r\n      </Heading>\r\n\r\n      <Flex\r\n        flexDirection={[\"column\", \"row\"]}\r\n        w={[\"full\", \"auto\"]}\r\n        as=\"form\"\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <Input\r\n          placeholder=\"Escribe un nombre\"\r\n          bg={bgInputs}\r\n          focusBorderColor=\"teal.400\"\r\n          size=\"lg\"\r\n          mr={[0, 4]}\r\n          mb={[4, 0]}\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n\r\n        <Select\r\n          data-testid=\"SearchForm__select\"\r\n          placeholder=\"Selecciona un estado\"\r\n          bg={bgInputs}\r\n          focusBorderColor=\"teal.400\"\r\n          size=\"lg\"\r\n          mr={[0, 4]}\r\n          mb={[4, 0]}\r\n          onChange={(e) => setStatus(e.target.value)}\r\n        >\r\n          <option value=\"alive\" data-testid=\"alive\">\r\n            Con vida\r\n          </option>\r\n          <option value=\"dead\" data-testid=\"dead\">\r\n            Sin vida\r\n          </option>\r\n          <option value=\"unknown\" data-testid=\"unknown\">\r\n            No identificado\r\n          </option>\r\n        </Select>\r\n\r\n        <Button\r\n          ml=\"auto\"\r\n          colorScheme=\"teal\"\r\n          size=\"lg\"\r\n          minW={24}\r\n          isLoading={finder.loading}\r\n          type=\"submit\"\r\n        >\r\n          Buscar\r\n        </Button>\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","import { Box } from \"@chakra-ui/react\";\r\nimport BackToTop from \"components/BackToTop\";\r\nimport CharacterList from \"./components/CharacterList\";\r\nimport SearchForm from \"./components/SearchForm\";\r\n\r\nconst Finder: React.FC = () => {\r\n  return (\r\n    <Box data-testid=\"Finder\">\r\n      <SearchForm />\r\n      <CharacterList />\r\n      <BackToTop />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Finder;\r\n","import Layout from \"components/Layout\";\r\nimport Finder from \"features/Finder\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Layout>\r\n      <Finder />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { extendTheme, theme } from \"@chakra-ui/react\";\r\nimport styles from \"./styles\";\r\nimport config from \"./config\";\r\n\r\nconst overrides = {\r\n  styles,\r\n  config,\r\n  fonts: {\r\n    body: `Inter,-apple-system,BlinkMacSystemFont,\"Segoe UI\",Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\"`,\r\n  },\r\n  fontWeights: {\r\n    light: 300,\r\n    normal: 400,\r\n    medium: 500,\r\n    bold: 700,\r\n    black: 900,\r\n  },\r\n};\r\n\r\nexport default extendTheme(overrides, theme);\r\n","import { mode } from \"@chakra-ui/theme-tools\";\r\n\r\nconst styles = {\r\n  global: (props: any) => ({\r\n    body: {\r\n      bg: mode(\"gray.100\", \"gray.800\")(props),\r\n    },\r\n  }),\r\n};\r\n\r\nexport default styles;\r\n","const config = {\r\n  initialColorMode: \"dark\",\r\n  useSystemColorMode: false,\r\n};\r\n\r\nexport default config;\r\n","import theme from \"./theme\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\n\r\nconst ChakraUiProvider: React.FC = ({ children }) => (\r\n  <ChakraProvider theme={theme}>{children}</ChakraProvider>\r\n);\r\n\r\nexport default ChakraUiProvider;\r\n","import { QueryClient } from \"react-query\";\r\n\r\nconst queryClient = new QueryClient({\r\n  defaultOptions: {\r\n    queries: {\r\n      refetchOnWindowFocus: false,\r\n      retry: false,\r\n    },\r\n  },\r\n});\r\n\r\nexport default queryClient;\r\n","import { QueryClientProvider } from \"react-query\";\r\nimport queryClient from \"./queryClient\";\r\n\r\nconst QueryProvider: React.FC = ({ children }) => (\r\n  <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\r\n);\r\n\r\nexport default QueryProvider;\r\n","import ChakraUiProvider from \"./chakra/ChakraUiProvider\";\r\nimport QueryProvider from \"./query/QueryProvider\";\r\nimport { FinderProvider } from \"./finder/context\";\r\n\r\nconst AppProvider: React.FC = ({ children }) => {\r\n  return (\r\n    <QueryProvider>\r\n      <ChakraUiProvider>\r\n        <FinderProvider>{children}</FinderProvider>\r\n      </ChakraUiProvider>\r\n    </QueryProvider>\r\n  );\r\n};\r\n\r\nexport default AppProvider;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport AppProvider from \"./state\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppProvider>\r\n      <App />\r\n    </AppProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}